(define foldr
  (let [(foldr (fn [nv op l]
                 (if (= l ())
                     nv
                     (op (car l)
                         foldr nv op (cdr l)))))]
    foldr))

(define const
  (let [(const (fn [a b]
                 a))]
    const))

(define length
  (let [(legnth (foldr 0 (fn [x rec] (+ 1 rec))))]
    length))


(define foldr
  (fn [nv op l]
     (if (= l ())
         nv
         (op (car l)
             foldr nv op (cdr l)))))

(define foldr (fn [nv op l] (if (= l ()) nv (op (car l) foldr nv op (cdr l)))))

(define foldr
  (let [(foldr (fn [nv op l]
                 (if (= l ())
                     nv
                     (op (car l)
                         foldr nv op (cdr l)))))]
    foldr))

;; Examples

((fn [a] (fn [b] b)) 1 5)

(let [(a     (cons 1 (cons 2 (cons 3 ()))))
      (foldr (fn [nv op l]
                (if (= l ())
                    nv
                    (op (car l)
                        (foldr nv op (cdr l))))))
      (sum   (foldr 0 +))]
  (sum a))
